/*
 * Copyright (c) 1997-2018 Objective Systems, Inc.
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Objective Systems, Inc.
 *
 * PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 *
 *****************************************************************************/
/*
// CHANGE LOG
// Date         Init    Description
// 11/03/03	CZ	Expand documentation comments.
//
//////////////////////////////////////////////////////////////////////////////
*/

/**
 * @file asn1xer.h
 * ASN.1 runtime constants, data structure definitions, and functions to
 * support the XML Encoding Rules (XER) as defined in the ITU-T X.693 standard.
 */

/**
 * @mainpage ASN1C XER Runtime Classes and Library Functions
 *
 * The <B>ASN.1 C++ runtime classes</B> are wrapper classes that provide
 * an object-oriented interface to the ASN.1 C Runtime Library functions.
 * The classes described in this manual are derived from the common
 * classes documented in the ASN1C C/C++ Common Runtime manual.
 * They are specific to the XML Encoding Rules (XER)as defined in
 * the X.693 ITU-T  standard.
 *
 * These XER specific C++ runtime classes include:
 * <UL> <LI>classes for streaming XER decoding </LI><LI>classes for
 * streaming XER encoding.</LI></UL>
 *
 * The <B> ASN.1 XER Runtime Library</B> contains the low-level
 * constants, types, and functions that are assembled by the compiler
 * to encode/decode more complex structures.
 *
 * This library consists of the following items:
 *   <UL> <LI>A global include file ("asn1xer.h") that is compiled into all
 * generated source files.</LI>
 *<LI> An object library of functions that are linked with the C functions
 * after compilation with a C complier.</LI></UL>
 *
 * In general, programmers will not need to be too concerned with the details
 * of these functions. The ASN.1 compiler generates calls to them in the C or
 * C++ source files that it creates. However, the functions in the library may
 * also be called on their own in applications requiring their specific
 * functionality.
 */
#ifndef _ASN1XER_H_
#define _ASN1XER_H_

#include "rtsrc/asn1type.h"
#include "rtxsrc/rtxMemBuf.h"

/** @defgroup xerruntime XER Runtime Library Functions.
 * @{
 * The ASN.1 XML Encoding Rules (XER) runtime library contains
 * low-level constants, types, and functions that are assembled
 * by the ASN1C compiler to encode/decode more complex structures.
 *
 * The XER low-level C encode/decode functions are
 * identified by their prefixes: xerEnc for XER encode,
 * xerDec for XER decode, and xer for XER utility functions.
 */
typedef enum {
   XERINIT,
   XERSTART,
   XERDATA,
   XEREND,

   XERSTART0,
   XEREND0
} ASN1XERState;

#define XERINDENT       3

typedef struct {
   const char* name;
   OSBOOL optional;
} XerElemInfo;

typedef struct XmlNamedBitsDict {
   const char* name;
   OSUINT32 bitnum;
} XmlNamedBitsDict;

/* This macro returns the byte count in the given context buffer */
#define XERBYTECNT(pctxt) (pctxt)->buffer.byteIndex

#include "rtxersrc/rtSAXDefs.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef BUILDASN1XERDLL
#define EXTERNXER __declspec(dllexport)
#elif defined (USEASN1XERDLL)
#define EXTERNXER __declspec(dllimport)
#else
#define EXTERNXER
#endif /* BUILDASN1XERDLL */

/* decode functions */
/** @defgroup xerdecruntime XER C Decode Functions.
 * @{
 *
 * XER runtime library decode functions handle the decoding of the primitive
 * ASN.1 data types and length variables. Calls to these functions are
 * assembled in the C source code generated by the ASN1C complier to decode
 * complex ASN.1 structures. These functions are also directly callable from
 * within a user's application program if the need to decode a primitive data
 * item exists.
 */

/**
 * This function will decode a variable ASN.1 16-bit character BMPString type.
 * This function will allocate dynamic memory to store the decoded result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param outdata      A pointer to a structure variable to receive the decoded
 *                       string. The string is stored as an array of short
 *                       integer characters. The memory is allocated for the
 *                       string by the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecBMPStr (OSCTXT* pctxt,
                            ASN1BMPString* outdata);

/**
 * This function will decode a variable of teh ASN.1 OCTET STRING type into a
 * static memory structure. The octet string must be Base64 encoded. This
 * function call is used to decode a sized octet string production.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnocts       A pointer to an integer value to receive the decoded
 *                       number of octets.
 * @param bufsize      A integer variable containing the size (in octets) of
 *                       the sized ASN.1 octet string. An error will occur if
 *                       the number of octets in the decoded string is larger
 *                       than this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecBase64Str (OSCTXT* pctxt,
                               OSOCTET* pvalue, OSUINT32* pnocts,
                               OSINT32 bufsize);

/**
 * This function is identical to xerDecBase64Str except that it supports
 * lengths up to 64-bits in size on 64-bit machines.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnocts       A pointer to an integer value to receive the decoded
 *                       number of octets.
 * @param bufsize      A integer variable containing the size (in octets) of
 *                       the sized ASN.1 octet string. An error will occur if
 *                       the number of octets in the decoded string is larger
 *                       than this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecBase64Str64 (OSCTXT* pctxt,
                                 OSOCTET* pvalue, OSSIZE* pnocts,
                                 OSSIZE bufsize);

/**
 * This function will decode a variable of the ASN.1 INTEGER type. In this
 * case, the integer is assumed to be of a larger size than can fit in a C or
 * C++ long type (normally 32 or 64 bits). For example, parameters used to
 * calculate security values are typically larger than these sizes.
 *
 * These variables are stored in character string constant variables. Depending
 * on specified radix, they could be represented as binary, octal, decimal or
 * hexadecimal strings starting with appropriate prefix. If it is necessary to
 * convert to another radix, then use rtxBigIntSetStr or rtxBigIntToString
 * functions.
 *
 * @param pctxt        Pointer to context block structure.
 * @param ppvalue      Pointer to a character pointer variable to receive the
 *                       decoded unsigned value. Dynamic memory is allocated
 *                       for the variable using the rtxMemAlloc function. The
 *                       decoded variable is represented as a string starting
 *                       with appropriate prefix.
 * @param radix        The expected radix of the decoded value. The only
 *                       radices 2, 8, 10 and 16 are supported.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecBigInt (OSCTXT* pctxt, char **ppvalue, int radix);


/**
 * This function will decode a variable of the ASN.1 BIT STRING type into a
 * static memory structure. This function call is generated by ASN1C to decode
 * a sized bit production.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnbits       A pointer to an integer value to receive the decoded
 *                       number of bits.
 * @param bufsize      An integer variable containing the size (in octets) of
 *                       the sized ASN.1 bit string. An error will occur if the
 *                       number of octets in the decoded string is larger than
 *                       this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecBitStr (OSCTXT* pctxt, OSOCTET* pvalue,
                            OSUINT32* pnbits, OSINT32 bufsize);

/**
 * This function is identical to xerDecBitStr except that it supports
 * lengths up to 64-bits in size on 64-bit machines.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnbits       A pointer to an integer value to receive the decoded
 *                       number of bits.
 * @param bufsize      An integer variable containing the size (in octets) of
 *                       the sized ASN.1 bit string. An error will occur if the
 *                       number of octets in the decoded string is larger than
 *                       this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecBitStr64 (OSCTXT* pctxt, OSOCTET* pvalue,
                              OSSIZE* pnbits, OSSIZE bufsize);

/**
 * This function decodes a variable of the ASN.1 BIT STRING type to a memory
 * buffer. The decoded data will be put into the memory buffer starting from
 * the current position and bit offset. After all data is decoded the bit
 * string may be fetched out by call to ::xerDecCopyBitStr or
 * ::xerDecCopyDynBitStr functions. <p>Usually, this function is used in the
 * 'characters' SAX handler.
 *
 * @param pMemBuf            Pointer to the destination memory buffer.
 * @param inpdata            Pointer to a source string to be decoded.
 * @param length             Length of the source string (in characters).
 * @param skipWhitespaces    Indicates, could whitespaces be ignored or they
 *                             are illegal.
 * @return                   Completion status of operation:
 *                             - 0 (0) = success,
 *                             - negative return value is error.
 */
EXTERNXER int xerDecBitStrMemBuf (OSRTMEMBUF* pMemBuf,
                                  const XMLCHAR* inpdata,
                                  int length, OSBOOL skipWhitespaces);

/**
 * This function decodes a variable of the ASN.1 BOOLEAN type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to a variable to receive the decoded BOOLEAN
 *                       value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecBool (OSCTXT* pctxt, OSBOOL *pvalue);

/**
 * This function copies the decoded BIT STRING from the memory buffer. This
 * function call is generated by ASN1C to decode a sized bit string production.
 *
 * @param pctxt            Pointer to context block structure. Its buffer
 *                           should be set to point to the decoded data.
 * @param pvalue           Pointer to a buffer to receive the decoded data.
 * @param pnbits           Pointer to an integer value to receive the decoded
 *                           number of bits.
 * @param bufsize          An integer variable containing the size (in octets)
 *                           of the sized ASN.1 bit string. An error will occur
 *                           if the number of octets in the decoded string is
 *                           larger than this value.
 * @param lastBitOffset    A number of actual bits in the last octet.
 * @return                 Completion status of operation:
 *                           - 0 (0) = success,
 *                           - negative return value is error.
 */
EXTERNXER int xerDecCopyBitStr (OSCTXT* pctxt,
                                OSOCTET* pvalue, OSUINT32* pnbits,
                                OSINT32 bufsize, int lastBitOffset);

/**
 * This function copies the decoded BIT STRING from the memory buffer. This
 * function will allocate dynamic memory to store the decoded result.
 *
 * @param pctxt            Pointer to context block structure. Its buffer
 *                           should be set to point to the decoded data.
 * @param pvalue           Pointer to a dynamic bit string structure to receive
 *                           the decoded bit string. Dynamic memory is
 *                           allocated to hold the string using the
 *                           ::rtxMemAlloc function.
 * @param lastBitOffset    A number of actual bits in the last octet.
 * @return                 Completion status of operation:
 *                           - 0 (0) = success,
 *                           - negative return value is error.
 */
EXTERNXER int xerDecCopyDynBitStr (OSCTXT* pctxt,
                                   ASN1DynBitStr* pvalue,
                                   int lastBitOffset);

/**
 * This function copies the decoded OCTET STRING from the memory buffer. This
 * function will allocate dynamic memory to store the decoded result.
 *
 * @param pctxt            Pointer to context block structure. Its buffer
 *                           should be set to point to the decoded data.
 * @param pvalue           Pointer to a dynamic octet string structure to
 *                           receive the decoded octet string. Dynamic memory
 *                           is allocated to hold the string using the
 *                           ::rtxMemAlloc function.
 * @param lastBitOffset    A number of actual bits in the last octet.
 * @return                 Completion status of operation:
 *                           - 0 (0) = success,
 *                           - negative return value is error.
 */
EXTERNXER int xerDecCopyDynOctStr (OSCTXT* pctxt, ASN1DynOctStr* pvalue,
                                   int lastBitOffset);

/**
 * This function copies the decoded OCTET STRING from the memory buffer. This
 * function call is generated by ASN1C to decode a sized octet string
 * production.
 *
 * @param pctxt            Pointer to context block structure. Its buffer
 *                           should be set to point to the decoded data.
 * @param pvalue           Pointer to a variable to receive the decoded bit
 *                           string. This is assumed to be a static array large
 *                           enough to hold the number of octets specified in
 *                           the 'bufsize' input parameter.
 * @param pnocts           Pointer to an integer value to receive the decoded
 *                           number of octets.
 * @param bufsize          An integer variable containing the size (in octets)
 *                           of the sized ASN.1 octet string. An error will
 *                           occur if the number of octets in the decoded
 *                           string is larger than this value.
 * @param lastBitOffset    A number of actual bits in the last octet.
 * @return                 Completion status of operation:
 *                           - 0 (0) = success,
 *                           - negative return value is error.
 */
EXTERNXER int xerDecCopyOctStr (OSCTXT* pctxt,
                                OSOCTET* pvalue, OSUINT32* pnocts,
                                OSINT32 bufsize, int lastBitOffset);

/**
 * This function will decode a variable of one of the ASN.1 8-bit character
 * string types. These types include IA5String, VisibleString, PrintableString,
 * and NumericString. This function will allocate dynamic memory to store the
 * result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param outdata      A pointer to a character string pointer variable to
 *                       receive the decoded string. The string as stored as a
 *                       standard null-terminated C string. Memory is allocated
 *                       for the string by the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecDynAscCharStr (OSCTXT* pctxt,
                                   const char** outdata);


/**
 * This function will decode a variable of the ASN.1 OCTET STRING type. The
 * octet string must be Base64 encoded. This function will allocate dynamic
 * memory to store the decoded result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a dynamic octet string structure to receive
 *                       the decoded octet string. Dynamic memory is allocated
 *                       to hold the string using the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecDynBase64Str (OSCTXT* pctxt, ASN1DynOctStr* pvalue);

/**
 * This function will decode a variable of the ASN.1 BIT STRING type. This
 * function will allocate dynamic memory to store the decoded result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a dynamic bit string structure to receive
 *                       the decoded bit string. Dynamic memory is allocated to
 *                       hold the string using the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecDynBitStr (OSCTXT* pctxt, ASN1DynBitStr* pvalue);

/**
 * This function will decode a variable of the ASN.1 OCTET STRING type. This
 * function will allocate dynamic memory to store the decoded result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a dynamic bit string structure to receive
 *                       the decoded bit string. Dynamic memory is allocated to
 *                       hold the string using the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecDynOctStr (OSCTXT* pctxt, ASN1DynOctStr* pvalue);

/**
 * This function will decode a variable of UTF8String ASN.1 type. Generally,
 * the SAX parser converts all UTF8 format strings to 16-bit Unicode format
 * automatically. This function converts the Unicode string back to UTF8
 * format. This function will allocate dynamic memory to store the decoded
 * result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param outdata      A pointer to a character string pointer variable to
 *                       receive the decoded string. The string as stored as a
 *                       UTF8 null-terminated string. Memory is allocated for
 *                       the string by the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecDynUTF8Str (OSCTXT* pctxt,
                                ASN1UTF8String* outdata);

/**
 * This function decodes a variable of the ASN.1 INTEGER type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to a variable to receive the decoded integer
 *                       value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecInt (OSCTXT* pctxt, OSINT32* pvalue);

/**
 * This function decodes an 8-bit variable of the ASN.1 INTEGER type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to an 8-bit variable to receive the decoded
 *                       integer value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecInt8 (OSCTXT* pctxt, OSINT8* pvalue);

/**
 * This function decodes a 16-bit variable of the ASN.1 INTEGER type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to a 16-bit variable to receive the decoded
 *                       integer value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecInt16 (OSCTXT* pctxt, OSINT16* pvalue);

/**
 * This function decodes a 64-bit variable of the ASN.1 INTEGER type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to a 64-bit variable to receive the decoded
 *                       integer value. The OSINT64 type is set to the C type
 *                       '__int64', 'long long' or 'long' in the asn1type.h
 *                       file (depends on the used platform and the compiler).
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecInt64 (OSCTXT* pctxt, OSINT64* pvalue);

/**
 * This function decodes a value of the ASN.1 OBJECT IDENTIFIER type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to value to receive decoded result. The
 *                       ASN1OBJID structure contains an integer to hold the
 *                       number of subidentifiers and an array to hold the
 *                       subidentifier values.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecObjId (OSCTXT* pctxt, ASN1OBJID *pvalue);

/**
 * This function decodes a value of the ASN.1 OBJECT IDENTIFIER type using
 * 64-bit subidentifiers.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to value to receive decoded result. The
 *                       ASN1OID64 structure contains an integer to hold the
 *                       number of subidentifiers and an array of 64-bit
 *                       unsigned integers to hold the subidentifier values.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecObjId64 (OSCTXT* pctxt, ASN1OID64 *pvalue);

/**
 * This function will decode a variable of the ASN.1 OCTET STRING type into a
 * static memory structure. This function call is generated by ASN1C to decode
 * a sized octet string production.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnocts       Pointer to an integer value to receive the number of
 *                       octets.
 * @param bufsize      An integer variable containing the size (in octets) of
 *                       the sized ASN.1 octet string. An error will occur if
 *                       the number of octets in the decoded string is larger
 *                       than this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecOctStr (OSCTXT* pctxt, OSOCTET* pvalue,
                            OSUINT32* pnocts, OSINT32 bufsize);

/**
 * This function is identical to xerDecOctStr except that it supports
 * lengths up to 64-bits in size on 64-bit machines.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnocts       Pointer to an integer value to receive the number of
 *                       octets.
 * @param bufsize      An integer variable containing the size (in octets) of
 *                       the sized ASN.1 octet string. An error will occur if
 *                       the number of octets in the decoded string is larger
 *                       than this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecOctStr64 (OSCTXT* pctxt, OSOCTET* pvalue,
                              OSSIZE* pnocts, OSSIZE bufsize);

/**
 * This function decodes a variable of the ASN.1 OCTET STRING type to a memory
 * buffer. The decoded data will be put into the memory buffer starting from
 * the current position and bit offset. After all data is decoded the octet
 * string may be fetched out by call to ::xerDecCopyOctStr or
 * ::xerDecCopyDynOctStr functions. <p>Usually, this function is used in the
 * 'characters' SAX handler.
 *
 * @param pMemBuf            Pointer to the destination memory buffer.
 * @param inpdata            Pointer to a source string to be decoded.
 * @param length             Length of the source string (in characters).
 * @param skipWhitespaces    Indicates, could whitespaces be ignored or they
 *                             are illegal.
 * @return                   Completion status of operation:
 *                             - 0 (0) = success,
 *                             - negative return value is error.
 */
EXTERNXER int xerDecOctStrMemBuf (OSRTMEMBUF* pMemBuf,
                                  const XMLCHAR* inpdata,
                                  int length, OSBOOL skipWhitespaces);

/**
 * This function will decode an ASN.1 open type. This used to be the ASN.1 ANY
 * type, but now is used in a variety of applications requiring an encoding
 * that can be interpreted by a decoder without prior knowledge of the type of
 * the variable.
 *
 * @param pctxt        A pointer to a context block structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a structure variable to receive the decoded
 *                       string. The string as stored as an array of unsigned
 *                       integer characters. Memory is allocated for the string
 *                       by the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecOpenType (OSCTXT* pctxt, ASN1OpenType* pvalue);

/**
 * This function will decode a variable of the ASN.1 32-bit character
 * UniversalString type. This includes the UniversalString type.
 *
 * @param pctxt        A pointer to a context block structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a structure variable to receive the decoded
 *                       string. The string as stored as an array of unsigned
 *                       integer characters. Memory is allocated for the string
 *                       by the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecReal (OSCTXT* pctxt, OSREAL* pvalue);

/**
 * This function will decode a variable of the ASN.1 REAL type into
 * a OSUTF8CHAR*.  It is intended for use when the REAL type is constrained to
 * base 10 and OSUTF8CHAR* is the chosen representation.
 *
 * @param pctxt        A pointer to a context block structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a structure variable to receive the decoded
 *                       string. The string is stored as an array of unsigned
 *                       integer characters. Memory is allocated for the string
 *                       by the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecReal10 (OSCTXT* pctxt, const OSUTF8CHAR** pvalue);

/**
 * This function decodes a value of the ASN.1 RELATIVE-OID type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to value to receive decoded result. The
 *                       ASN1OBJID structure contains an integer to hold the
 *                       number of subidentifiers and an array to hold the
 *                       subidentifier values.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecRelativeOID (OSCTXT* pctxt, ASN1OBJID *pvalue);

/**
 * This function decodes a variable of the unsigned variant of ASN.1 INTEGER
 * type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to a variable to receive the decoded unsigned
 *                       integer value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecUInt (OSCTXT* pctxt, OSUINT32* pvalue);

/**
 * This function decodes an 8-bit variable of the unsigned variant of ASN.1
 * INTEGER type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to an 8-bit variable to receive the decoded
 *                       unsigned integer value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecUInt8 (OSCTXT* pctxt, OSUINT8* pvalue);

/**
 * This function decodes a 16-bit variable of the unsigned variant of ASN.1
 * INTEGER type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to a 16-bit variable to receive the decoded
 *                       unsigned integer value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecUInt16 (OSCTXT* pctxt, OSUINT16* pvalue);

/**
 * This function decodes a 64-bit variable of the unsigned variant of ASN.1
 * INTEGER type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to a 64-bit variable to receive the decoded
 *                       unsigned integer value. The OSUINT64 type is set to
 *                       the C type 'unsigned __int64', 'unsigned long long' or
 *                       'unsigned long' in the asn1type.h file (depends on the
 *                       used platform and the compiler).
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerDecUInt64 (OSCTXT* pctxt, OSUINT64* pvalue);

/**
 * This function will decode a variable an ASN.1 32-bit character
 * UniversalString type. This includes the UniversalString type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param outdata      A pointer to a structure variable to receive the decoded
 *                       string. The string as stored as an array of unsigned
 *                       integer characters. Memory is allocated for the string
 *                       by the rtxMemAlloc function.
 */
EXTERNXER int xerDecUnivStr (OSCTXT* pctxt,
                             ASN1UniversalString* outdata);

/**
 * This function is used to set the internal decode buffer pointer within the
 * runtime library decode module. It must be called prior to calling any other
 * complier generated or runtime library decode functions.
 *
 * @param pCtxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param bufaddr      A pointer to a memory buffer containing the ASN.1
 *                       message. The pointer must point at the first byte in
 *                       the message.
 * @param bufsiz       The size of the message that was read. This is used to
 *                       set an internal message size to check for field length
 *                       errors. If this size is not known, a zero value can be
 *                       passed to cause these checks to be bypassed.
 */
EXTERNXER int xerSetDecBufPtr (OSCTXT* pCtxt, const OSOCTET* bufaddr,
                               size_t bufsiz);

/** @} xerdecruntime  */

/* encode functions */
/** @defgroup xerencruntime XER C Encode Functions.
 * @{
 *
 * The XER low-level encode functions handle the XER encoding of primitive
 * ASN.1 data types. Calls to these functions are assembled in the C source
 * code generated by the ASN1C complier to accomplish the encoding of complex
 * ASN.1 structures. These functions are also directly callable from within a
 * user's application program if the need to accomplish a low level encoding
 * function exists.
 *
 * The procedure to call a low-level encode function is the same as the
 * procedure to call a complier generated encode function described above. The
 * rtInitContext and xerSetEncBufPtr functions must first be called to
 * initialize a context and set a pointer to a buffer into which the variable
 * is to be encoded. A static encode buffer is spcified by specifying a pointer
 * to a buffer and buffer size. Setting the buffer address to NULL and buffer
 * size to 0 specifies a dynamic buffer. The encode function is then invoked.
 * The result of the encoding will start at the beginning of the specified
 * buffer, or, if a dynamic buffer was used, it can be obtained by calling
 * xerGetMsgPtr. The length of the encoded component is obtained by calling
 * xerGetMsgLen.
 */

/**
 * This function is used to set the internal buffer within the runtime library
 * encode module. It must be called prior to calling any other generated or
 * runtime library encode functions.
 *
 * @param pCtxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param bufaddr      A pointer to a memory buffer containing the ASN.1
 *                       message. The pointer must point at the first byte in
 *                       the message.
 * @param bufsiz       The size of the message that was read. This is used to
 *                       set an internal message size to check for field length
 *                       errors. If this size is not known, a zero value can be
 *                       passed to cause these checks to be bypassed.
 * @param canonical    TRUE, if canonical XML encoding rules (CXER) should be
 *                       used. Otherwise FALSE.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerSetEncBufPtr (OSCTXT* pCtxt, OSOCTET* bufaddr,
                               size_t bufsiz, OSBOOL canonical);

/**
 * This function encodes a variable one of the ASN.1 character string types
 * that are based on 8-bit character sets. This includes IA5Sring,
 * VisibleString, PrintableString, and UTF8String, and NumericString.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a null-terminated C character string to be
 *                       encoded.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If an empty string
 *                       is passed (""), no element tag is added to the encoded
 *                       value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncAscCharStr (OSCTXT* pctxt,
                                const char* value,
                                const char* elemName);


/**
 * This function encodes a variable of the ASN.1 OCTET STRING type using Base64
 * encoding.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param nocts        The number of octets (bytes) within the OCTET STRING to
 *                       be encoded.
 * @param data         A pointer to an OCTET STRING containing the octet data
 *                       to be encoded.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type is (&lt;OCTET_STRING&gt;) is
 *                       added. If an empty string is passed (""), no element
 *                       tag is added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncBase64Str (OSCTXT* pctxt, OSSIZE nocts,
                               const OSOCTET* data,
                               const char* elemName);

/**
 * This function encodes a variable of the ASN.1 INTEGER type. In this case,
 * the integer is assumed to be of a larger size than can fit in a C or C++
 * long type (normally 32 or 64 bits). For example, parameters used to
 * calculate security values are typically larger than these sizes.
 *
 * Items of this type are stored in character string constant variables. They
 * can be represented as decimal strings (with no prefixes), as hexadecimal
 * strings starting with a "0x" prefix, as octal strings starting with a "0o"
 * prefix or as binary strings starting with a "0b" prefix. Other radixes are
 * currently not supported.
 *
 * @param pctxt        Pointer to context block structure.
 * @param value        A pointer to a character string containing the value to
 *                       be encoded.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;INTEGER&gt;) is added.
 *                       If an empty string is passed (""), no element tag is
 *                       added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncBigInt (OSCTXT* pctxt, const char* value,
                            const char* elemName);

/**
 * This function encodes a variable of the ASN.1 BIT STRING type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param nbits        The number of bits within the bit string to be encoded.
 * @param data         A pointer to an OCTET string containing the bit data to
 *                       be encoded. This string contains bytes having the
 *                       actual bit settings as they are to be encoded in the
 *                       message.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;BIT_STRING&gt;) is
 *                       added. If an empty string is passed (""), no element
 *                       tag is added to the encoded value.
 * @param outputType   An enumerated type whose value is set to either
 *                       'ASN1BIN' (for binary format) or 'ASN1HEX' (for
 *                       hexadecimal format).
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncBitStr (OSCTXT* pctxt, OSSIZE nbits,
                            const OSOCTET* data,
                            const char* elemName,
                            ASN1StrType outputType);

EXTERNXER int xerEncBoolValue (OSCTXT* pctxt, OSBOOL value);


/**
 * This function encodes a variable of the ASN.1 BOOLEAN type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A BOOLEAN value to be encoded. A BOOLEAN is defined as a
 *                       single octet whose value is 0 for False and any other
 *                       value for TRUE.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;BOOLEAN&gt;) is added.
 *                       If an empty string is passed (""), no element tag is
 *                       added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncBool (OSCTXT* pctxt, OSBOOL value,
                          const char* elemName);

/**
 * This function should be called at the end of the document's encoding.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncEndDocument (OSCTXT* pctxt);

/**
 * This function encodes the ending tag of the XML element, such as &lt;/element&gt;.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param elemName     A pointer to the name of the element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncEndElement (OSCTXT* pctxt, const char* elemName);

/**
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 */
EXTERNXER int xerEncIndent (OSCTXT* pctxt);

/**
 * This function encodes a variable of the ASN.1 INTEGER type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        An INTEGER value to be encoded. The OSINT32 type is set
 *                       to the C type 'int' in the asn1type.h file. This is
 *                       assumed to represent a 32-bit integer value.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;INTEGER&gt;) is added.
 *                       If an empty string is passed (""), no element tag is
 *                       added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncInt (OSCTXT* pctxt, OSINT32 value,
                         const char* elemName);

/**
 * This function encodes a 64-bit variable of the ASN.1 INTEGER type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A 64-bit INTEGER value to be encoded. The OSINT64 type
 *                       is set to the C type '__int64', 'long long' or 'long'
 *                       in the asn1type.h file (depends on the used platform
 *                       and the compiler). This is assumed to represent a
 *                       64-bit integer value.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;INTEGER&gt;) is added.
 *                       If an empty string is passed (""), no element tag is
 *                       added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncInt64 (OSCTXT* pctxt, OSINT64 value,
                           const char* elemName);


/**
 * This function inserts a new line symbol int the XML document.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncNewLine (OSCTXT* pctxt);

/**
 * This function encodes a variable of the ASN.1 OBJECT IDENTIFIER type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to an object identifier structure. This
 *                       structure contains an integer to hold the number of
 *                       subidentifers in the object and an array to hold the
 *                       subidentifier values.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;OBJECT_IDENTIFIER&gt;)
 *                       is added. If an empty string is passed (""), no
 *                       element tag is added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncObjId (OSCTXT* pctxt, const ASN1OBJID *pvalue,
                           const char* elemName);

/**
 * This function encodes a variable of the ASN.1 OBJECT IDENTIFIER type using
 * 64-bit subidentifiers.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a 64-bit object identifier structure. This
 *                       structure contains an integer to hold the number of
 *                       subidentifers in the object and an array of 64-bit
 *                       unsigned integers to hold the subidentifier values.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;OBJECT_IDENTIFIER&gt;)
 *                       is added. If an empty string is passed (""), no
 *                       element tag is added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncObjId64 (OSCTXT* pctxt, const ASN1OID64 *pvalue,
                             const char* elemName);

/**
 * This function encodes a variable of the ASN.1 RELATIVE-OID type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to an object identifier structure. This
 *                       structure contains an integer to hold the number of
 *                       subidentifers in the object and an array to hold the
 *                       subidentifier values.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;RELATIVE_OID&gt;) is
 *                       added. If an empty string is passed (""), no element
 *                       tag is added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncRelativeOID (OSCTXT* pctxt, const ASN1OBJID *pvalue,
                                 const char* elemName);

/**
 * This function encodes a variable of the ASN.1 OCTET STRING type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param nocts        The number of octets (bytes) within the OCTET STRING to
 *                       be encoded.
 * @param data         A pointer to an OCTET STRING containing the octet data
 *                       to be encoded.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;OCTET_STRING&gt;) is
 *                       added. If an empty string is passed (""), no element
 *                       tag is added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncOctStr (OSCTXT* pctxt, OSSIZE nocts,
                            const OSOCTET* data,
                            const char* elemName);

/**
 * This function encodes a variable of the REAL data type. This function
 * provides support for the plus-infinity and the minus-infinity special real
 * values. Use the rtxGetPlusInfinity or rtxGetMinusInfinity functions to get
 * these special values.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A value to be encoded. Special real values plus and
 *                       minus infinity are encoded by using the
 *                       rtxGetPlusInfinity and rtxGetMinusInfinity functions to
 *                       set the real value to be encoded.
 * @param elemName     A pointer to the name of the element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncReal (OSCTXT* pctxt, OSREAL value,
                          const char* elemName);

/**
 * This function encodes a variable of the REAL base 10 data type. This function
 * provides support for the plus-infinity and the minus-infinity special real
 * values. Use the rtxGetPlusInfinity or rtxGetMinusInfinity functions to get
 * these special values.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A value to be encoded.
 * @param elemName     A pointer to the name of the element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncReal10 (OSCTXT* pctxt, const OSUTF8CHAR* value,
                          const char* elemName);

/**
 * This function encodes the starting record of the XML document (such as the
 * &lt;?xml version = "1.0" encoding = "UTF-8"?&gt;). This function should be called
 * prior to encoding any other fields in the document. After all elements in
 * the document are encoded, xerEncEndDocument should be called.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncStartDocument (OSCTXT* pctxt);

/**
 * This function encodes the string tag of the XML element, such as &lt;element&gt;.
 * After the element's data is encoded, the xerEncEndElement function should be
 * called.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param elemName     A pointer to the name of the element.
 * @param attributes   A pointer to the attributes of the element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncStartElement (OSCTXT* pctxt,
                                  const char* elemName,
                                  const char* attributes);

/**
 * This function encodes an empty element, such as &lt;element/&gt;.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param elemName     A pointer to the name of the element.
 * @param attributes   A pointer to the attributes of the element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncEmptyElement (OSCTXT* pctxt,
                                  const char* elemName,
                                  const char* attributes);
/**
 * This function encodes a named value, for example an enumerated value, such
 * as &lt;element&gt;&lt;value/&gt;&lt;/element&gt;.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a value string
 * @param elemName     A pointer to the name of the element.
 * @param attributes   A pointer to the attributes of the element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncNamedValue (OSCTXT* pctxt,
                                const char* value,
                                const char* elemName,
                                const char* attributes);

/**
 * This function encodes an unsigned variable of the ASN.1 INTEGER type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.e.
 * @param value        An unsigned INTEGER value to be encoded. The ASNU1INT
 *                       type is set to the C type 'unsigned int' in the
 *                       asn1type.h file. This is assumed to represent a 32-bit
 *                       integer value.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;INTEGER&gt;) is added.
 *                       If an empty string is passed (""), no element tag is
 *                       added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncUInt (OSCTXT* pctxt, OSUINT32 value,
                          const char* elemName);

/**
 * This function encodes an unsigned 64-bit variable of the ASN.1 INTEGER type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        An unsigned 64-bit INTEGER value to be encoded. The
 *                       OSUINT64 type is set to the C type 'unsigned
 *                       __int64', 'unsigned long long' or 'unsigned long' in
 *                       the asn1type.h file (depends on the used platform and
 *                       the compiler). This is assumed to represent an
 *                       unsigned 64-bit integer value.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;INTEGER&gt;) is added.
 *                       If an empty string is passed (""), no element tag is
 *                       added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncUInt64 (OSCTXT* pctxt, OSUINT64 value,
                            const char* elemName);

/**
 * This function encodes a variable of the BMPString ASN.1 character string
 * type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a structure representing a 16-bit character
 *                       string to encoded. This structure contains a character
 *                       count element and a pointer to an array of 16-bit
 *                       character elements represented as 16-bit short
 *                       integers.
 * @param elemName     A pointer to a name of an element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncBMPStr (OSCTXT* pctxt,
                            const ASN1BMPString* value,
                            const char* elemName);

/**
 * This function encodes a variable of the ASN.1 Universal character string.
 * This differs from the encode routines for the character strings previously
 * described in that the Universal string type is based o te 32-bit characters.
 * A 32-bit character string is modeled using an array of unsigned integers.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a structure representing a 16-bit character
 *                       string to encoded. This structure contains a character
 *                       count element and a pointer to an array of 32-bit
 *                       character elements represented as 32-bit short
 *                       integers.
 * @param elemName     A pointer to a name of an element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncUnivStr (OSCTXT* pctxt,
                             const ASN1UniversalString* value,
                             const char* elemName);

/**
 * This function encodes a variable of the ASN.1 character string types that
 * are based on 16-bit character sets and are represented as null-terminated
 * Unicode string. This includes IA5String, VisibleString, PrintableString,
 * NumericString, and BMPString.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a null-terminated 16-bit string to be
 *                       encoded.
 * @param nchars       The number of characters to be encoded.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncUniCharData (OSCTXT* pctxt,
                                 const OSUNICHAR* value,
                                 OSUINT32 nchars);

/**
 * This function encodes a variable one of the ASN.1 character string types
 * that are based on 16-bit character sets and are represented as
 * null-terminated Unicode strings. This includes IA5String, VisibleString,
 * PrintableString, NumericString, Adn BMPString.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a null-terminated 16-bit character string
 *                       to be encoded.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If an empty string
 *                       is passed (""), no element tag is added to the encoded
 *                       value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncUniCharStr (OSCTXT* pctxt,
                                OSUNICHAR* value,
                                const char* elemName);

/**
 * This function encodes a variable of the old (pre-1994) ASN.1 ANY type or
 * other elements defined in the later standards to be Open Types (for example,
 * a variable type declaration in a CLASS construct as defined n X.681). A
 * variable of this is considered to be a previously encoded ASN.1 message
 * component.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param nocts        The number of octets (bytes) within the OCTET STRING to
 *                       be encoded.
 * @param data         A pointer to an OCTET STRING containing an encoded ASN.1
 *                       message component.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;REAL&gt;) is
 *                       added. If wan empty string is passed (""), no
 *                       element tag is sadded to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncOpenType (OSCTXT* pctxt, OSSIZE nocts,
                              const OSOCTET* data,
                              const char* elemName);

/**
 * This function encodes an ASN.1 NULL placeholder. In XER the NULL value is
 * represented as an empty element, such as &lt;null/&gt;.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If a null or empty
 *                       string is passes (""), no element tag is added to the
 *                       encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xerEncNull (OSCTXT* pctxt, const char* elemName);


EXTERNXER int xerEncXmlCharData (OSCTXT* pctxt,
                                 const XMLCHAR* pvalue,
                                 int length);
/** @} xerencruntime */

/* utility functions */
/** @defgroup xerutilruntime XER C Utility Functions.
 * @{
 *
 * The XER utility functions are common routines used by both XER encode and
 * decode functions.
 */


/**
 * This function is used to compare two strings: the first is represented as a
 * 16-bit character null-terminated string and the second is represented as an
 * 8-bit standard null-terminated string.
 *
 * @param text1        A pointer to a 16-bit character null-terminated string.
 * @param text2        A pointer to an 8-bit character null-terminated string.
 * @return             The result of the comparison: TRUE, if strings match,
 *                       otherwise FALSE.
 */
EXTERNXER OSBOOL xerCmpText (const XMLCHAR* text1, const char* text2);


EXTERNXER int xerCopyText (OSCTXT* pctxt, const char* text);

/**
 * This function returns the length of a 16-bit character null-terminated
 * string.
 *
 * @param text         A pointer to a 16-bit character null-terminated string.
 */
EXTERNXER int xerTextLength (const XMLCHAR* text);

/**
 * This function converts a 16-bit character string to a standard
 * null-terminated C-string. This function will allocate dynamic memory to
 * store the decoded result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param text         A pointer to a 16-bit character null-terminated string.
 * @return             The resulting C string. The memory is allocated by using
 *                       rtxMemAlloc function.
 */
EXTERNXER const char* xerTextToCStr (OSCTXT* pctxt,
                                          const XMLCHAR* text);

/**
 * This function is used to get the encoded message length.
 *
 * @param pctxt        A pointer to a context structure.
 * @return             The length of a message in the buffer.
 */
EXTERNXER size_t xerGetMsgLen (OSCTXT* pctxt);

/**
 * This function is used to obtain a pointer to the start of an encoded
 * message. This function is called after a complier generated encode function
 * to get the pointer to the start of the encoded message. It is normally used
 * when dynamic encoding is specified because the message pointer is not known
 * until the encoding is complete. If static encoding is used, the message
 * starts at the beginning of the specified buffer and the xerGetMsgLen
 * function can be used to obtain the length of the message.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @return             A pointer to the beginning of the encoded message.
 */
EXTERNXER OSOCTET* xerGetMsgPtr (OSCTXT* pctxt);

EXTERNXER int xerGetElemIdx (const XMLCHAR* elemName,
                             XerElemInfo* pElemInfo, int numElems);

EXTERNXER int xerGetSeqElemIdx (const XMLCHAR* elemName,
                                XerElemInfo* pElemInfo,
                                int numElems, int startIndex);

EXTERNXER int xerFinalizeMemBuf (OSRTMEMBUF* pMemBuf);

/**
 * Returns numeric version of run-time library. The format of version is as
 * follows: MmP, where:
 *     M - major version number;
 *     m - minor version number;
 *     p - patch release number.
 * For example, the value 581 means the version 5.81.
 * @return             Version of run-time library in numeric format.
 */
EXTERNXER int xerGetLibVersion (OSVOIDARG);

/**
 * Returns information string describing the library. The string
 * contains name of library, its version and flags used for building
 * the library.
 *
 * @return     Information string
 */
EXTERNXER const char* xerGetLibInfo (OSVOIDARG);

/** @} xerutilruntime */


/* XML decode functions */

/** @defgroup xmldecruntime XML C Decode Functions.
 * @{
 *
 * XML runtime library decode functions handle the decoding of the primitive
 * ASN.1 data types and length variables. Calls to these functions are
 * assembled in the C source code generated by the ASN1C complier to decode
 * complex ASN.1 structures. These functions are also directly callable from
 * within a user's application program if the need to decode a primitive data
 * item exists.
 */

/**
 * This function will decode a variable of the ASN.1 BIT STRING type into a
 * static memory structure. This function call is generated by ASN1C to decode
 * a sized bit production.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnbits       A pointer to an integer value to receive the decoded
 *                       number of bits.
 * @param bufsize      An integer variable containing the size (in octets) of
 *                       the sized ASN.1 bit string. An error will occur if the
 *                       number of octets in the decoded string is larger than
 *                       this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecBitStr (OSCTXT* pctxt, OSOCTET* pvalue,
                            OSUINT32* pnbits, OSINT32 bufsize);

/**
 * This function is identical to xmlDecBitStr except that it supports
 * lengths up to 64-bits in size on 64-bit machines.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnbits       A pointer to an integer value to receive the decoded
 *                       number of bits.
 * @param bufsize      An integer variable containing the size (in octets) of
 *                       the sized ASN.1 bit string. An error will occur if the
 *                       number of octets in the decoded string is larger than
 *                       this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecBitStr64 (OSCTXT* pctxt, OSOCTET* pvalue,
                              OSSIZE* pnbits, OSSIZE bufsize);

/**
 * This function decodes a variable of the ASN.1 BOOLEAN type.
 *
 * @param pctxt        Pointer to context block structure.
 * @param pvalue       Pointer to a variable to receive the decoded BOOLEAN
 *                       value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecBool (OSCTXT* pctxt, OSBOOL *pvalue);

/**
 * This function will decode a variable of the ASN.1 BIT STRING type. This
 * function will allocate dynamic memory to store the decoded result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a dynamic bit string structure to receive
 *                       the decoded bit string. Dynamic memory is allocated to
 *                       hold the string using the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecDynBitStr (OSCTXT* pctxt, ASN1DynBitStr* pvalue);

/**
 * This function will decode a list of identifiers into the array of octets.
 * Identifiers should represent named bits value for BIT STRING. This function
 * call is generated by ASN1C to decode a named bit production.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a dynamic bit string structure to receive
 *                       the decoded bit string. Dynamic memory is allocated to
 *                       hold the string using the rtxMemAlloc function.
 * @param pBitDict     Bits' dictionary to be used to decode each bit. It is an
 *                       array of name-value pairs, represented by an array of
 *                       XmlNamedBitsDict structure.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecDynNamedBitStr
  (OSCTXT* pctxt, ASN1DynBitStr* pvalue,
   const XmlNamedBitsDict* pBitDict);

/**
 * This function will decode a variable of the ASN.1 OCTET STRING type. This
 * function will allocate dynamic memory to store the decoded result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a dynamic bit string structure to receive
 *                       the decoded bit string. Dynamic memory is allocated to
 *                       hold the string using the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecDynOctStr (OSCTXT* pctxt, ASN1DynOctStr* pvalue);

/**
 * This function will decode a variable of the ASN.1 GeneralizedTime type. This
 * function performs conversion between XML format of dateTime into the ASN.1
 * format. This function will allocate dynamic memory to store the result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param outdata      A pointer to a character string pointer variable to
 *                       receive the decoded string. The string as stored as a
 *                       standard null-terminated C string. Memory is allocated
 *                       for the string by the rtxMemAlloc function. It will
 *                       contain time in ASN.1 format.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecGeneralizedTime (OSCTXT* pctxt,
                                     const char** outdata);

/**
 * This function will decode a list of identifiers into the array of octets.
 * Identifiers should represent named bits value for BIT STRING. This function
 * call is generated by ASN1C to decode a named bit production.
 *
 * @param pMemBuf      Pointer to the destination memory buffer.
 * @param pData        A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param dataSize     An integer variable containing the size (in octets) of
 *                       the sized ASN.1 bit string. An error will occur if the
 *                       number of octets in the decoded string is larger than
 *                       this value.
 * @param pNumbits     A pointer to an integer value to receive the decoded
 *                       number of bits.
 * @param pBitDict     Bits' dictionary to be used to decode each bit. It is an
 *                       array of name-value pairs, represented by an array of
 *                       XmlNamedBitsDict structure.
 * @param chars        XML data to be appended to memory buffer before parsing.
 *                       Could be NULL, if it is final call to this function.
 * @param length       Number of characters in XML data to be appended to
 *                       memory buffer before parsing. Could be 0, if it is
 *                       final call to this function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecNamedBitStr
  (OSRTMEMBUF *pMemBuf, OSOCTET* pData, int dataSize, OSUINT32* pNumbits,
   const XmlNamedBitsDict* pBitDict,
   const XMLCHAR* chars, int length);

/**
 * This function will decode a variable of the ASN.1 OCTET STRING type into a
 * static memory structure. This function call is generated by ASN1C to decode
 * a sized octet string production.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnocts       Pointer to an integer value to receive the number of
 *                       octets.
 * @param bufsize      An integer variable containing the size (in octets) of
 *                       the sized ASN.1 octet string. An error will occur if
 *                       the number of octets in the decoded string is larger
 *                       than this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecOctStr (OSCTXT* pctxt, OSOCTET* pvalue,
                            OSUINT32* pnocts, OSINT32 bufsize);

/**
 * This function is identical to xmlDecOctStr except that it supports
 * lengths up to 64-bits in size on 64-bit machines.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a variable to receive the decoded bit
 *                       string. This is assumed to be a static array large
 *                       enough to hold the number of octets specified in the
 *                       bufsize input parameter.
 * @param pnocts       Pointer to an integer value to receive the number of
 *                       octets.
 * @param bufsize      An integer variable containing the size (in octets) of
 *                       the sized ASN.1 octet string. An error will occur if
 *                       the number of octets in the decoded string is larger
 *                       than this value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecOctStr64 (OSCTXT* pctxt, OSOCTET* pvalue,
                              OSSIZE* pnocts, OSSIZE bufsize);

/**
 * This function will decode a variable of the ASN.1 32-bit character
 * UniversalString type. This includes the UniversalString type.
 *
 * @param pctxt        A pointer to a context block structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param pvalue       A pointer to a structure variable to receive the decoded
 *                       string. The string as stored as an array of unsigned
 *                       integer characters. Memory is allocated for the string
 *                       by the rtxMemAlloc function.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecReal (OSCTXT* pctxt, OSREAL* pvalue);

/**
 * This function will decode a variable of the ASN.1 UTCTime type. This
 * function performs conversion between XML format of dateTime into the ASN.1
 * format. This function will allocate dynamic memory to store the result.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param outdata      A pointer to a character string pointer variable to
 *                       receive the decoded string. The string as stored as a
 *                       standard null-terminated C string. Memory is allocated
 *                       for the string by the rtxMemAlloc function. It will
 *                       contain time in ASN.1 format.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlDecUTCTime (OSCTXT* pctxt,
                             const char** outdata);

/** @} xmldecruntime  */


/* XML encode functions */
/** @defgroup xmlencruntime XML C Encode Functions.
 * @{
 *
 * The XML low-level encode functions handle the XML encoding of primitive
 * ASN.1 data types. In most cases XER encoding functions can be used for
 * encoding XML. But there are some differences between XER and XML encodings,
 * described in X.693 and X.694. These functions are very similar to XER ones,
 * and only functions provide different encoding are added.
 *

 */
/**
 * This function encodes a variable of the ASN.1 BIT STRING type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param namedbits    Bits' dictionary to be used to encode each bit. It is an
 *                       array of name-value pairs, represented by an array of
 *                       XmlNamedBitsDict structure.
 * @param noofnamedbits Number of named bits in bits' dictionary.
 * @param nbits        The number of bits within the bit string to be encoded.
 * @param data         A pointer to an OCTET string containing the bit data to
 *                       be encoded. This string contains bytes having the
 *                       actual bit settings as they are to be encoded in the
 *                       message.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;BIT_STRING&gt;) is
 *                       added. If an empty string is passed (""), no element
 *                       tag is added to the encoded value.
 * @param outputType   An enumerated type whose value is set to either
 *                       'ASN1BIN' (for binary format) or 'ASN1HEX' (for
 *                       hexadecimal format).
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlEncBitStr (OSCTXT* pctxt,
                            XmlNamedBitsDict *namedbits,
                            OSSIZE noofnamedbits,
                            OSSIZE nbits,
                            const OSOCTET* data,
                            const char* elemName,
                            ASN1StrType outputType);

EXTERNXER int xmlEncBoolValue (OSCTXT* pctxt, OSBOOL value);

/**
 * This function encodes a variable of the ASN.1 BOOLEAN type.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A BOOLEAN value to be encoded. A BOOLEAN is defined as a
 *                       single octet whose value is 0 for False and any other
 *                       value for TRUE.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If the name is null,
 *                       the default name for this type (&lt;BOOLEAN&gt;) is added.
 *                       If an empty string is passed (""), no element tag is
 *                       added to the encoded value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlEncBool (OSCTXT* pctxt, OSBOOL value,
                          const char* elemName);

/**
 * This function encodes an enumeration value for the ASN.1 ENUMERATED and
 * INTEGER types.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        An enumeration identifier to be encoded.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlEncEnum (OSCTXT* pctxt, const char* value);

/**
 * This function encodes a variable of the ASN.1 GeneralizedTime type. It
 * performs conversion from ASN.1 time format into the XML dateTime format.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a null-terminated C character string to be
 *                       encoded. It should contain GeneralizedTime in ASN.1
 *                       format.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If an empty string
 *                       is passed (""), no element tag is added to the encoded
 *                       value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlEncGeneralizedTime(OSCTXT *pctxt,
                            const char* value,
                            const char* elemName);

/**
 * This function encodes a named value, for example an enumerated value, such
 * as &lt;element&gt;value&lt;/element&gt;.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a value string
 * @param elemName     A pointer to the name of the element.
 * @param attributes   A pointer to the attributes of the element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlEncNamedValue (OSCTXT* pctxt,
                                const char* value,
                                const char* elemName,
                                const char* attributes);

EXTERNXER int xerEncOpenTypeExt (OSCTXT* pctxt, OSRTDList* pElemList);
/**
 * This function encodes a variable of the REAL data type. This function
 * provides support for the plus-infinity, minus-infinity, NaN and minus zero
 * special real values. Use the rtxGetPlusInfinity, rtxGetMinusInfinity, rtxGetNaN
 * and rtxGetMinusZero functions to get these special values.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A value to be encoded. Special real values are encoded
 *                       by using the apropriate functions to set the real
 *                       value to be encoded.
 * @param elemName     A pointer to the name of the element.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlEncReal (OSCTXT* pctxt, OSREAL value,
                          const char* elemName);

/**
 * This function encodes a variable of the ASN.1 UTCTime type. It performs
 * conversion from ASN.1 time format into the XML dateTime format.
 *
 * @param pctxt        A pointer to a context structure. This provides a
 *                       storage area for the function to store all working
 *                       variables that must be maintained between function
 *                       calls.
 * @param value        A pointer to a null-terminated C character string to be
 *                       encoded. It should contain UTCTime in ASN.1 format.
 * @param elemName     This argument specifies the name of the element that is
 *                       wrapped around the encoded value. If an empty string
 *                       is passed (""), no element tag is added to the encoded
 *                       value.
 * @return             Completion status of operation:
 *                       - 0 (0) = success,
 *                       - negative return value is error.
 */
EXTERNXER int xmlEncUTCTime(OSCTXT *pctxt,
                            const char* value,
                            const char* elemName);

/** @} xmlencruntime */

#ifdef __cplusplus
}
#endif

/** @} xerruntime */

#endif
